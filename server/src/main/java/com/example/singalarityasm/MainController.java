package com.example.singalarityasm;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path = "/")
	public @ResponseBody String Hihi() {
		return "Hello, World!";
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path = "/signup", consumes = "application/json")
	public @ResponseBody String addNewUser(@RequestBody User user) {

		// check user existence
		// user = userRepository.findByEmail(user.getEmail);

		userRepository.save(user);
		return "Saved";
	}

	// @PostMapping("/login")
	// public User addUser(@Valid @RequestBody String email, @RequestBody String pw) {
	// 	@Query("SELECT u.id FROM User u where u.email = :email") 
    // 	User user = userRepository.findIdByEmail(String lastname).orElseThrow(() -> new ResourceNotFoundException("Invalid email!" + userId));
		
	// 	if (user.pw == pw) {
	// 		return ResponseEntity.ok().body(user);
	// 	} else throw new ResourceNotFoundException("The password is incorrect");
	// }

	// @GetMapping("/{id}")
	// public ResponseEntity<User> getUserById(@PathVariable(value = "id") Long userId)
	// 		throws ResourceNotFoundException {
		
	// 	User user = userRepository.findById(userId)
	// 			.orElseThrow(() -> new ResourceNotFoundException("User id is not valid" + userId));
		
	// 	return ResponseEntity.ok().body(user);
	// }
}
