package com.example.singalarityasm;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path = "/signup", consumes = "application/json")
	public @ResponseBody String addNewUser(@RequestBody User user) throws ExistedEmail {
		// check user existence
		List<User> users = userRepository.findByEmail(user.getEmail());
		if (users.size() > 0) throw new ExistedEmail("This email was registered with another account");

		userRepository.save(user);
		return "success";
	}

	@CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path = "/login", consumes = "application/json")
	public @ResponseBody User login(@RequestBody User user) throws ResourceNotFoundException {
		// check user existence
		List<User> users = userRepository.findByEmail(user.getEmail());
		if (users.size() == 0) throw new ResourceNotFoundException("Your email is not registered yet");
		
		// check password
		String password = users.get(0).getPw();
		if (password.equals(user.getPw())) return users.get(0);
		else throw new ResourceNotFoundException("Invalid password");
	}

	@CrossOrigin(origins = "http://localhost:3000")
	@GetMapping(path = "/info")
	public @ResponseBody User getUser(@RequestHeader("Authorization") String token) throws ResourceNotFoundException {
		List<User> users = userRepository.findByEmail(token);
		if (users.size() == 0) throw new ResourceNotFoundException("Can not find user");

		return users.get(0);
	}
}
